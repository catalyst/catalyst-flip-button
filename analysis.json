{
  "schema_version": "1.0.0",
  "classes": [{
    "description": "`<catalyst-flip-button>` is a toggle button with a flip animation.\n\n    <catalyst-flip-button default-label=\"Default Label\" flipped-label=\"Flipped Label\"></catalyst-flip-button>\n\nIt may include optional form control setting.\n\n    <catalyst-flip-button name=\"form-element-name\" value=\"value\" default-label=\"Default Label\" flipped-label=\"Flipped Label\"></catalyst-flip-button>\n\n### Events\n\nName     | Cause\n-------- |-------------\n`change` | Fired when the component's `flipped` value changes due to user interaction.\n\n### Focus\nTo focus a catalyst-flip-button, you can call the native `focus()` method as long as the\nelement has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\n_Note: Mixins currently do not work with the ES5 version of this component and should probably be avoided.\nThey can be used for testing out styling changes without needing to make any changes to this component's code._\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--catalyst-flip-button-appearance` | Custom Property applied to both the front and back faces' appearance | button\n`--catalyst-flip-button-border-radius` | Custom Property applied to both the front and back faces' border-radius | unset\n`--catalyst-flip-button-front-background` | Custom Property applied to the front face's background | #dddddd\n`--catalyst-flip-button-back-background` | Custom Property applied to the back face's background | #dddddd\n`--catalyst-flip-button` | Mixin applied to both the front and back face of the element | {}\n`--catalyst-flip-button-default` | Mixin applied to the front face of the element | {}\n`--catalyst-flip-button-flipped` | Mixin applied to the back face of the element | {}",
    "summary": "",
    "path": "dist/catalyst-flip-button.js",
    "properties": [],
    "methods": [{
      "name": "connectedCallback",
      "description": "Fires when the element is inserted into the DOM.",
      "privacy": "public",
      "sourceRange": {
        "start": {
          "line": 129,
          "column": 8
        },
        "end": {
          "line": 163,
          "column": 9
        }
      },
      "metadata": {},
      "params": []
    }, {
      "name": "_upgradeProperty",
      "description": "Upgrade the property on this element with the given name.\n\nA user may set a property on an _instance_ of an element before its prototype has been connected to this class.\nThis method will check for any instance properties and run them through the proper class setters.\n\nSee the [lazy properties](/web/fundamentals/architecture/building-components/best-practices#lazy-properties) section for more details.",
      "privacy": "protected",
      "sourceRange": {
        "start": {
          "line": 176,
          "column": 8
        },
        "end": {
          "line": 184,
          "column": 9
        }
      },
      "metadata": {},
      "params": [{
        "name": "prop",
        "type": "string",
        "description": "The name of a property."
      }]
    }, {
      "name": "_setUpDimensions",
      "description": "Set the dimensions of this element.\n\nThis element cannot obtain it's dimensions automatically from it's children\nas they are positioned absolutely. This method will manually calculate the\nminimum size this component should be to contain its children.",
      "privacy": "protected",
      "sourceRange": {
        "start": {
          "line": 193,
          "column": 8
        },
        "end": {
          "line": 232,
          "column": 9
        }
      },
      "metadata": {},
      "params": []
    }, {
      "name": "disconnectedCallback",
      "description": "Fires when the element is removed from the DOM.",
      "privacy": "public",
      "sourceRange": {
        "start": {
          "line": 237,
          "column": 8
        },
        "end": {
          "line": 240,
          "column": 9
        }
      },
      "metadata": {},
      "params": []
    }, {
      "name": "attributeChangedCallback",
      "description": "Fired when any of the attributes in the `observedAttributes` array change.",
      "privacy": "public",
      "sourceRange": {
        "start": {
          "line": 444,
          "column": 8
        },
        "end": {
          "line": 514,
          "column": 9
        }
      },
      "metadata": {},
      "params": [{
        "name": "name",
        "type": "string",
        "description": "The name of the attribute that changed."
      }, {
        "name": "oldValue",
        "type": "*",
        "description": "The original value of the attribute that changed."
      }, {
        "name": "newValue",
        "type": "*",
        "description": "The new value of the attribute that changed."
      }]
    }, {
      "name": "_onKeyDown",
      "description": "Called when a key is pressed on this element.",
      "privacy": "protected",
      "sourceRange": {
        "start": {
          "line": 521,
          "column": 8
        },
        "end": {
          "line": 539,
          "column": 9
        }
      },
      "metadata": {},
      "params": [{
        "name": "event",
        "type": "KeyboardEvent"
      }]
    }, {
      "name": "_onClick",
      "description": "Called when this element is clicked.",
      "privacy": "protected",
      "sourceRange": {
        "start": {
          "line": 544,
          "column": 8
        },
        "end": {
          "line": 547,
          "column": 9
        }
      },
      "metadata": {},
      "params": []
    }, {
      "name": "_togglePressed",
      "description": "`_togglePressed()` calls the `flipped` setter and flips its state.\nBecause `_togglePressed()` is only caused by a user action, it will\nalso dispatch a change event.",
      "privacy": "protected",
      "sourceRange": {
        "start": {
          "line": 556,
          "column": 8
        },
        "end": {
          "line": 576,
          "column": 9
        }
      },
      "metadata": {},
      "params": []
    }],
    "staticMethods": [],
    "demos": [{
      "url": "../demo/demo.es5.html",
      "description": "ES5 Component Demo"
    }, {
      "url": "../demo/demo.es6.html",
      "description": "ES6 Component Demo"
    }],
    "metadata": {},
    "sourceRange": {
      "start": {
        "line": 94,
        "column": 6
      },
      "end": {
        "line": 577,
        "column": 7
      }
    },
    "privacy": "public",
    "superclass": "HTMLElement",
    "name": "CatalystFlipButton"
  }]
}